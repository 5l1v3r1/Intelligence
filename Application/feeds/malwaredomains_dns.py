from  dbmanagment.dbmanagment import DbClient

import re
import core.common as request
from dateutil import parser
from constants.values import *

from feeds.feedparent import FeederParent

_name_ = "malwaredomainlist_dns"
__by__ = "malwaredomainlist"
__reference__ = "malwaredomainlist.com"
__info__ = "malwaredomainlist.com"
__collection__="domain"
class Md_dns(FeederParent):
    __type__ = Type.Malware_domain

    def __init__(self, type=__type__, name=_name_,by=__by__,sourcelink=Feeders.malwaredomains_dns.s_link,updateinterval=Feeders.malwaredomains_dns.u_interval):
        FeederParent.__init__(self,type,name,by)
        self.intelligence=[]
        self.sourcelink=sourcelink
        self.updateinterval=updateinterval
        self.log=getlog()                           #this comming from constans

    def checkstatus(self,url=Feeders.malwaredomains_dns.s_link):
        return request.checkstatus(url)  #link is available


    def getIntelligent(self):
        content=request.getPage(self.sourcelink)
        if content!=False:
            self.extract(content)

    def createDocuments(self):
        date=self.intelligence[0]
        date=parser.parser(date)
        documents = []
        for item in self.intelligence[1:]:
            intelligence = {
                '_id': item[1],
                "lastDate": date,
                'type': getType(self.type),
                'description': __info__,
                'by': self.by,
                'risk': "No info",
                "Intelligence":
                    [{
                        "ip": item[0],
                        "lastDate": date,
                        'type': getType(self.type),
                        'description': __info__,
                        'by': self.by,
                        'risk': "No info",
                    }]

            }
            documents.append(intelligence)
        return documents



    def extract(self,content):

        # todo :compare performace  get list like as belows
        """
         buffer = StringIO(str(content, 'utf-8'))
         list = [item for item in buffer]

         list=line in content.split('\n'):

        :param content: dote from extracting inteligence
        :return:
        """


        list = [item for item in content]
        date = list[2].split('updated:')[1]
        #print(date.split('#')[0])
        self.intelligence.append(date.split('#')[0])
        for line in list:
            if not line or line.startswith('#')  or line=='\r\n':
                continue
            self.intelligence.append(re.split('\s+',line)[0:2])


    def insertdb(self):
        client = DbClient()
        client.setdatabase('intelligence')
        client.setcollection(__collection__)
        client.insertmany(self.createDocuments())


    def __str__(self):
        return "%s  %s  %s " % (self.name, self.type, self.by)



#a=Md_dns()
#print(a.checkstatus(a.sourcelink))
#a.getIntelligent()
#a.insertdb()













