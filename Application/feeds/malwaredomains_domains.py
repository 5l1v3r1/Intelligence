from  dbmanagment.dbmanagment import DbClient
import core.common as core
from feeds.feedparent import FeederParent
from constants.values import *


_name_ = "malwaredomainlist_domains"
__by__ = "malwaredomainlist domain"
__info__ = "malwaredomainlist domains feeder"
__collection__="domain"
class Md_domains(FeederParent):
    __type__ = Type.Malware_domain

    def __init__(self, type=__type__, name=_name_,by=__by__,sourcelink=Feeders.malwaredomains_domain.s_link,updateinterval=Feeders.malwaredomains_domain.u_interval):
        FeederParent.__init__(self,type,name,by)
        self.intelligence=[]
        self.sourcelink=sourcelink
        self.updateinterval=updateinterval
        self.log=getlog()                           #this comming from constans

    def checkstatus(self,url=Feeders.malwaredomains_domain.s_link):
        return core.checkstatus(url)  #link is available


    def getIntelligent(self):
        content=core.getPage(self.sourcelink)
        if content!=False:
            self.extract(content)

    def createDocuments(self):
        documents = []
        for item in self.intelligence[1:]:
            intelligence = {
                '_id': item[0],
                "lastDate": core.parser.parser(item[3]),
                'type':item[1],
                'description': __info__,
                'source': item[2],
                'by': self.by,
                'risk': "No info",
                "Intelligence":
                    [{
                         "lastDate": core.parser.parser(item[3]),
                         "datachunk":item[3:],
                         'type':item[1],
                         'description': __info__,
                         'source': item[2],
                         'by': self.by,
                         'risk': "No info",
                    }]

            }
            documents.append(intelligence)
        return documents



    def extract(self,content):

        # todo :compare performace  get list like as belows
        """
         buffer = StringIO(str(content, 'utf-8'))
         list = [item for item in buffer]

         list=line in content.split('\n'):

        :param content: dote from extracting inteligence
        :return:
        """

        for line in content:
            line = line.strip('\r\n').replace('\xa0', "")
            if not line or line.startswith('#'):
                continue
            items = line.split('\t')[2:]
            self.intelligence.append(items)




    def insertdb(self):
        if len(self.intelligence)>1:
            client = DbClient()
            client.setdatabase('intelligence')
            client.setcollection(__collection__)
            client.insertmany(self.createDocuments())
        else:
            self.log.info("Intelligece empty")




    def __str__(self):
        return "%s  %s  %s " % (self.name, self.type, self.by)



#a=Md_domains()
#print(a.checkstatus(a.sourcelink))
#a.getIntelligent()
#a.insertdb()













