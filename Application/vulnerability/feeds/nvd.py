from dbmanagment.dbmanagment import DbClient
from constants.values import *
import  zipfile, io
from feeds.feedparent import FeederParent
import core.common as request
import json

from dateutil import parser

_name_  = "Nvd"
__by__  = "National Vulnerability Database"
__url__ = "https://static.nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-2017.json.zip"
__reference__ = "https://nvd.nist.gov"


class Nvd(FeederParent):
    __type__ = Type.Ip

    def __init__(self,type=__type__, name=_name_, by=__by__, sourcelink = __url__, updateinterval = 24*60):
        FeederParent.__init__(self, type, name, by)
        self.intelligence = None
        self.sourcelink = sourcelink
        self.updateinterval = updateinterval
        self.log = getlog()
        self.dbclient = self.init_db()

    def init_db(self):
        client = DbClient()
        client.set_database('vulnerability')
        client.set_collection('categories')
        return client

    def checkstatus(self,urls=__url__):
        temp = request.checkstatus(urls)
        self.log.info("Source Available-> " + str(urls) + " :" + str(temp))


    def getIntelligent(self):
        content = request.getPage(self.sourcelink)
        if content != False:
            self.extract(content)



    def extract(self, data):
        jsondata = None
        z = zipfile.ZipFile(io.BytesIO(data.content))
        #print(z.namelist())    ->filename list
        for finfo in z.infolist():
            with z.open(finfo) as f:
                data = f.read()
                jsondata = json.loads(data.decode("utf-8"))
        #print(jsondata)
        self.intelligence=jsondata
    def parse(self):
        vendor_nodes = {}
        product_nodes = {}
        last_nodes = []
        for item in  self.intelligence['CVE_Items']:        #todo add index database for CVE_Items
            self.create_documents(item,vendor_nodes,product_nodes,last_nodes)
            #cve=item['cve']
            #cve_id=cve['CVE_data_meta']['ID']               #todo chech this in then pass

        #self.dbclient.insert_many(self.create_document(product_nodes, 1))
        #self.dbclient.insert_many(self.create_document(vendor_nodes,0))
        #self.dbclient.insert_many(self.create_document(product_nodes,1))
        self.dbclient.insert_many(last_nodes,type=1)



    def create_documents(self,item,vendor_nodes,product_nodes,last_nodes):
        cve = item['cve']
        vendors = cve['affects']['vendor']['vendor_data']
        cve_id = cve['CVE_data_meta']['ID']
        for vendor in vendors:
            vendor_name = vendor['vendor_name']
            productlist=[]
            for item_prod in vendor['product']['product_data']:
                productlist.append(item_prod['product_name'])
                versionlist=[]
                for item3 in item_prod['version']['version_data']:
                    name=vendor_name+"_"+item_prod['product_name']
                    versionlist.append(item_prod['product_name']+"_"+item3['version_value'])


                    last_nodes.append(
                        {       "_id": item_prod['product_name']+"_"+item3['version_value'],
                                "security": [{"ID": cve_id, "exploitabilityScore": 9.3}],
                                "customer": [{'id': "customer_aziz"}],
                                "parent": item_prod['product_name']}
                    )

                if name in product_nodes:
                    verlist    = product_nodes[name][0]
                    parentlist = product_nodes[name][1]
                    templist = verlist + versionlist
                    product_nodes[name][0] = list(set(templist))

                    parentlist.append(vendor_name)
                    product_nodes[name][1] = list(set(parentlist))
                else:
                    product_nodes[name] = [versionlist,[vendor_name]]

                #product_nodes.append(
                #    {"_id": item_prod['product_name'],
                #               "version": versionlist,
                #               "parent": vendor_name}
                #)

            #vendor_nodes.append(
            #    {"_id": vendor_name, "product": productlist,"parent":'root'}
            #)
            if vendor_name in vendor_nodes:
                templist = vendor_nodes[vendor_name]
                templist = templist + productlist
                vendor_nodes[vendor_name] = list(set(templist))
            else:
                vendor_nodes[vendor_name] = productlist



    def create_document(self,data,flag):
        documents=[]
        if flag == 0:                       #vendor
            for key, value in data.items():
                documents.append({"_id": key, "product": value, "parent": 'root'})
        elif flag == 1:                     #product
            for key, value in data.items():
                documents.append(
                    {"_id": key,
                     "version": value[0],
                     "parent": value[1]})
        else:
            pass
        return documents


    def insertdb(self):
        if len(self.intelligence) > 1:
            self.dbclient.insert_many()
            #client.insert_many(self.createDocuments())
        else:
            self.log.info("Intelligece empty")

    def __str__(self):
        return "%s  %s  %s " % (self.name, self.type, self.by)

a = Nvd()
a.checkstatus(a.sourcelink)
a.getIntelligent()
a.parse()
